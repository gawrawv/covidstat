{"version":3,"sources":["components/Charts/Charts.module.css","images/covid-19.png","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/DataPicker/CountryPicker.jsx","components/DataPicker/ChartPicker.jsx","components/Footer/Footer.jsx","App.jsx","theme.js","serviceWorker.js","index.js","components/Cards/Cards.module.css","App.module.css","components/Footer/Footer.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","updated_at","active","critical","className","styles","container","Grid","justify","item","color","xs","md","cx","card","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","Date","toDateString","toFixed","url2","ChangeableURL","fetchGlobalMonthlyData","a","country","axios","get","covidData","timeline","console","log","groupedByDate","d3","key","d","getMonth","rollup","value","entries","fetchGlobalCriticalData","critical_arr_data","map","latest_data","total","reduce","acc","fetchData","calculated","fetchDailyData","modifiedData","dailyData","date","loading","fetchCountries","availabel_data","filter","name","code","error","Charts","chartType","useState","setDailyData","monthlyData","setMonthlyData","monthNames","selectedChartType","setSelectedChartType","fetchAPI","useEffect","MonthluChart","length","labels","datasets","label","borderColor","backgroundColor","fill","dailyChart","Paper","style","width","borderRadius","boxShadow","marginTop","textAlign","useStyles","makeStyles","theme","formControl","margin","spacing","marginBottom","minWidth","CountryPicker","handleCountryChange","classes","fetchedCountries","setFetchedCountries","FormControl","Select","native","inputProps","id","onChange","e","target","aria-label","ChartPicker","handleChartChange","selected","Footer","Link","underline","href","social_link","Provider","size","Loading","require","App","props","fetchedData","setState","chart","prevState","state","fetcheddata","this","image","src","coronaImage","alt","direction","flexGrow","Component","createMuiTheme","palette","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","Alert","severity","AlertTitle","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b85b9c94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3duf6\"};","module.exports = __webpack_public_path__ + \"static/media/covid-19.6ce9074d.png\";","/* eslint-disable camelcase */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\n\nconst Cards = ({\n  data: {\n    confirmed,\n    deaths,\n    recovered,\n    updated_at,\n    active,\n    critical,\n    // new_deaths,\n    // new_confirmed,\n    // new_recovered,\n  },\n}) => {\n  // console.log(deaths, confirmed, recovered);\n  return (\n    <div className={styles.container}>\n      <Grid container justify=\"center\">\n        <Grid item color=\"primary\" xs={12} md={2} className={cx(styles.card)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Confirmed\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={confirmed ?? 0} duration={2} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(updated_at).toDateString()}</Typography>\n            <Typography variant=\"body2\"> Total Number of active case of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={2} className={cx(styles.card)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recoverd <small>({((recovered / confirmed) * 100).toFixed(2)}%) </small>\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={recovered ?? 0} duration={2} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(updated_at).toDateString()}</Typography>\n\n            <Typography variant=\"body2\"> Total Number of recovered from COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item xs={12} md={2} className={cx(styles.card)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Critical\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={critical ?? 0} duration={2} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(updated_at).toDateString()}</Typography>\n\n            <Typography variant=\"body2\"> Total Number of Critical caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item xs={12} md={2} className={cx(styles.card)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths <small>({((deaths / confirmed) * 100).toFixed(2)}%) </small>\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={deaths ?? 0} duration={2} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(updated_at).toDateString()}</Typography>\n\n            <Typography variant=\"body2\"> Total Number of death caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item color=\"primary\" xs={12} md={2} className={cx(styles.card)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Active\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={0} end={active ?? 0} duration={2} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(updated_at).toDateString()}</Typography>\n            <Typography variant=\"body2\"> Total Number of active case of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default Cards;\n","/* eslint-disable camelcase */\n/* eslint-disable no-console */\n/* eslint-disable consistent-return */\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\n// const url = 'https://covid19.mathdro.id/api';\nconst url2 = 'https://corona-api.com/';\nlet ChangeableURL = url2;\n\nexport const fetchGlobalMonthlyData = async (country = '') => {\n  ChangeableURL = country ? `${url2}/countries/${country}` : `${url2}/timeline`;\n  try {\n    const {\n      data: { data },\n    } = await axios.get(ChangeableURL);\n    const covidData = country ? data.timeline : data;\n    console.log(`timeline data ${country}`, country ? data.timeline : data);\n    const groupedByDate = d3\n      .nest()\n      .key((d) => {\n        return new Date(d.updated_at).getMonth();\n      })\n      .rollup((value) => ({\n        confirmed: d3.sum(value, (d) => d.confirmed),\n        deaths: d3.sum(value, (d) => d.deaths),\n        active: d3.sum(value, (d) => d.active),\n        recovered: d3.sum(value, (d) => d.recovered),\n      }))\n      .entries(covidData);\n    console.log('group by date', groupedByDate);\n\n    return groupedByDate;\n  } catch (error) {\n    console.log(error);\n  }\n};\n// fetch data\nconst fetchGlobalCriticalData = async () => {\n  const {\n    data: { data },\n  } = await axios.get(`${url2}/countries`);\n  const critical_arr_data = data.map((item) => item.latest_data.critical);\n  const total = critical_arr_data.reduce((acc, value) => acc + value);\n  return total;\n  // console.log(criticalData);\n};\n\nexport const fetchData = async (country = '') => {\n  ChangeableURL = country ? `${url2}/countries/${country}` : `${url2}/timeline`;\n  try {\n    const {\n      data: { data },\n    } = await axios.get(ChangeableURL);\n    console.log(`critical data ${country}: ${data?.latest_data?.critical}`);\n    const covidData = country ? data.latest_data : data[0];\n    const critical = country ? covidData.critical : await fetchGlobalCriticalData();\n    const updated_at = country ? data.updated_at : data[0].updated_at;\n    const calculated = country ? covidData.calculated : 0;\n    const active = covidData.confirmed - covidData.recovered - covidData.deaths;\n    return {\n      confirmed: covidData.confirmed,\n      recovered: covidData.recovered,\n      deaths: covidData.deaths,\n      active,\n      critical,\n      calculated,\n      updated_at,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// fetch daily data\n\nexport const fetchDailyData = async (country) => {\n  ChangeableURL = country ? `${url2}/countries/${country}` : `${url2}/timeline`;\n  try {\n    const {\n      data: { data },\n    } = await axios.get(ChangeableURL);\n    const covidData = country ? data.timeline : data;\n    const modifiedData = covidData.map((dailyData) => ({\n      recovered: dailyData.recovered,\n      active: dailyData.active,\n      deaths: dailyData.deaths,\n      date: dailyData.date,\n      loading: false,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const fetchDailyData = async (country) => {\n//   const data = country ? fetchCountryBasedDailyData(country) : fetchGlobalDailyData();\n//   return data;\n// };\n\n// fetch coutries\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { data },\n    } = await axios.get(`${url2}/countries`);\n\n    const availabel_data = data.filter((country) => country.latest_data.confirmed > 0);\n    // console.log('check avaiable data', availabel_data);\n    return availabel_data.map((country) => ({ name: country.name, code: country.code }));\n  } catch (error) {\n    console.error(error);\n  }\n};\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-shadow */\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Paper } from '@material-ui/core';\n// eslint-disable-next-line import/named\nimport { fetchDailyData, fetchGlobalMonthlyData } from '../../api';\nimport styles from './Charts.module.css';\n\nconst Charts = ({ country, chartType }) => {\n  const [dailyData, setDailyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [monthNames] = useState([\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ]);\n  const [selectedChartType, setSelectedChartType] = useState('');\n\n  const fetchAPI = async () => {\n    setDailyData(await fetchDailyData(country));\n    setMonthlyData(await fetchGlobalMonthlyData(country));\n    setSelectedChartType(chartType);\n    // console.table(monthlyData);\n  };\n  useEffect(() => {\n    fetchAPI();\n  }, [country, chartType]);\n  const MonthluChart = monthlyData.length ? (\n    <Line\n      data={{\n        labels: monthlyData.map(({ key }) => monthNames[key]),\n        datasets: [\n          {\n            data: monthlyData.map(({ value: { active } }) => active),\n            label: 'Active',\n            borderColor: 'rgba(0,0,255,0.5)',\n            backgroundColor: 'rgba(0,0,255,0.5)',\n            fill: true,\n          },\n          {\n            data: monthlyData.map(({ value: { recovered } }) => recovered),\n            label: 'Recovered',\n            borderColor: 'rgba(0,187,0,0.5)',\n            backgroundColor: 'rgba(0,255,0,0.5)',\n            fill: true,\n          },\n          {\n            data: monthlyData.map(({ value: { deaths } }) => deaths),\n            label: 'Deaths',\n            borderColor: 'rgba(255,0,0,0.5)',\n            backgroundColor: 'rgba(255,0,0,0.5)',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : (\n    ''\n  );\n  const dailyChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ active }) => active),\n            label: 'Active',\n            borderColor: 'rgba(0,0,255,0.5)',\n            backgroundColor: 'rgba(0,0,255,0.5)',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ recovered }) => recovered),\n            label: 'Recovered',\n            borderColor: 'rgba(0,187,0,0.5)',\n            backgroundColor: 'rgba(0,255,0,0.5)',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'rgba(255,0,0,0.5)',\n            backgroundColor: 'rgba(255,0,0,0.5)',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>\n      <Paper\n        style={{\n          width: '100vw',\n          backgroundColor: '#e0e0e0',\n          borderRadius: '10px',\n          boxShadow:\n            '6px 6px 14px 0 rgba(0, 0, 0, 0.253) , -8px -8px 18px 0 rgba(255, 255, 255, 0.76) ',\n        }}\n      >\n        <div style={{ marginTop: '20px' }}>\n          <h1 style={{ textAlign: 'center' }}>{selectedChartType}</h1>\n\n          {selectedChartType === 'DailyData' ? dailyChart : MonthluChart}\n        </div>{' '}\n      </Paper>\n    </div>\n  );\n};\nexport default Charts;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport { Select, FormControl, Paper } from '@material-ui/core';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './DataPicker.module.css';\n// eslint-disable-next-line import/named\nimport { fetchCountries } from '../../api';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginBottom: 50,\n    minWidth: 220,\n  },\n}));\nconst CountryPicker = ({ handleCountryChange }) => {\n  const classes = useStyles();\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n      // console.log(`country List: ${fetchedCountries}`);\n    };\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={classes.formControl}>\n      {/* <InputLabel shrink htmlFor=\"outlined-age-native-simple\">\n        Country\n      </InputLabel> */}\n      <Select\n        native\n        label=\"Country\"\n        inputProps={{\n          name: 'Country',\n          id: '',\n        }}\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option aria-label=\"None\" value=\"\">\n          Global\n        </option>\n        {fetchedCountries.map((country) => (\n          <option key={country.code} value={country.code}>\n            {country.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\nexport default CountryPicker;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport { Select, FormControl, Paper } from '@material-ui/core';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './DataPicker.module.css';\n// eslint-disable-next-line import/named\nimport { fetchCountries } from '../../api';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginBottom: 50,\n    minWidth: 220,\n  },\n}));\nconst ChartPicker = ({ handleChartChange, chartType }) => {\n  const classes = useStyles();\n  //   const [chartType, setChartType] = useState('');\n\n  //   useEffect(() => {\n  //     const fetchAPI = async () => {\n  //       setFetchedCountries(await fetchCountries());\n  //       // console.log(`country List: ${fetchedCountries}`);\n  //     };\n  //     fetchAPI();\n  //   }, [setChartType]);\n\n  return (\n    <FormControl className={classes.formControl}>\n      <Select\n        native\n        label=\"Chart\"\n        inputProps={{\n          name: 'chart',\n          id: '',\n        }}\n        onChange={(e) => handleChartChange(e.target.value)}\n      >\n        <option value=\"DailyData\" selected={chartType === 'DailyData'}>\n          Daily Data\n        </option>\n        <option value=\"MonthlyData\" selected={chartType === 'MonthlyData'}>\n          Monthly Data\n        </option>\n      </Select>\n    </FormControl>\n  );\n};\nexport default ChartPicker;\n","import React from 'react';\nimport { Typography, Link } from '@material-ui/core';\nimport { FaFacebook, FaGithub, FaLinkedin } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport styles from './Footer.module.css';\n\nconst Footer = () => {\n  return (\n    <div className={styles.container}>\n      <Typography>\n        By{' '}\n        <Link underline=\"none\" color=\"primary\" href=\"https://github.com/gawrawv\">\n          Gaurav Raj Thapa\n        </Link>\n      </Typography>\n      <Typography className={styles.social_link}>\n        <IconContext.Provider value={{ color: '#385898', size: '25px' }}>\n          <Link underline=\"none\" href=\"https://www.facebook.com/dimebaggboy.gaurav/\" name=\"facebook\">\n            <FaFacebook />\n          </Link>\n        \n        </IconContext.Provider>\n        <IconContext.Provider value={{ color: '#003f67', size: '25px' }}>\n          <Link\n            underline=\"none\"\n            href=\"https://www.linkedin.com/in/gauravraj-thp-16b520161/\"\n            name=\"LinkedIn\"\n          >\n            <FaLinkedin />\n          </Link>\n        </IconContext.Provider>\n        <IconContext.Provider value={{ color: 'black', size: '25px' }}>\n          <Link underline=\"none\" href=\"https://github.com/gawrawv\" name=\"Github\">\n            <FaGithub />\n          </Link>\n        </IconContext.Provider>\n      </Typography>\n      <Typography color=\"textSecondary\"> May 31 2020 </Typography>\n    </div>\n  );\n};\nexport default Footer;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Charts, Cards, CountryPicker, Footer, ChartPicker } from './components';\nimport style from './App.module.css';\n// eslint-disable-next-line import/named\nimport { fetchData } from './api';\nimport coronaImage from './images/covid-19.png';\n\nconst Loading = require('react-loading-animation');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: { loading: true },\n      country: '',\n      chartType: 'DailyData',\n    };\n  }\n\n  async componentDidMount() {\n    const fetcheddata = await fetchData();\n    this.setState({ data: fetcheddata });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: { loading: fetchedData?.loading, ...fetchedData }, country });\n  };\n\n  handleChartChange = (chart) => {\n    this.setState((prevState) => ({ ...prevState, chartType: chart }));\n  };\n\n  render() {\n    const { data, country, chartType } = this.state;\n    if (data?.loading) {\n      return (\n        <main className={style.loading}>\n          <h1 style={{ textAlign: 'center' }}>Fetching COVID-19 Data</h1>\n          <Loading />\n        </main>\n      );\n    }\n    return (\n      <main className={style.container}>\n        <div className={style.image}>\n          <img src={coronaImage} alt=\"COVID-19\" />\n        </div>\n        <Cards data={data} />\n        <div style={{ width: '100%' }}>\n          <Grid\n            container\n            direction=\"row\"\n            style={{ flexGrow: '1' }}\n            // justify=\"center\"\n            // alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item xs={12}>\n              <Grid container justify=\"center\" spacing={3}>\n                <Grid item>\n                  <CountryPicker handleCountryChange={this.handleCountryChange} />\n                </Grid>\n                <Grid item>\n                  <ChartPicker handleChartChange={this.handleChartChange} chartType={chartType} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n        <Charts data={data} chartType={chartType} country={country} />\n        <Footer />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n});\nexport default theme;\n","/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable import/no-named-as-default */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Offline, Online } from 'react-detect-offline';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Online>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Online>\n    <Offline>\n      <Alert severity=\"error\">\n        <AlertTitle> No Internet </AlertTitle> Sorry! There is no{' '}\n        <strong>internet Connection</strong>\n      </Alert>\n    </Offline>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1rFf1\",\"MuiCard-root\":\"Cards_MuiCard-root__2WiSY\",\"card\":\"Cards_card__3aHL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2tsWR\",\"image\":\"App_image__jRCwu\",\"loading\":\"App_loading__CYms5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__3NTeV\",\"app\":\"Footer_app__2Nbhv\",\"social_link\":\"Footer_social_link__ZI-mq\"};"],"sourceRoot":""}